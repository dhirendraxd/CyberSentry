
import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { toast } from '@/hooks/use-toast';
import { useAnonymousData } from '@/hooks/useAnonymousData';

export interface MalwareScanParams {
  url?: string;
  fileName?: string;
  fileContent?: string;
}

export interface MalwareScanResult {
  status: 'scanning' | 'complete' | 'error';
  url?: string;
  fileName?: string;
  scanId?: string;
  detections?: {
    type: string;
    name: string;
    description: string;
    severity: 'low' | 'medium' | 'high';
  }[];
  clean: boolean;
  message?: string;
  timestamp: string;
}

export const useMalwareScan = () => {
  const [scanParams, setScanParams] = useState<MalwareScanParams | null>(null);
  const { saveData } = useAnonymousData();
  
  const scanQuery = useQuery({
    queryKey: ['malwareScan', scanParams],
    queryFn: async (): Promise<MalwareScanResult> => {
      if (!scanParams) {
        throw new Error('No scan parameters provided');
      }
      
      // Save scan activity
      await saveData('scan', {
        url: scanParams.url,
        fileName: scanParams.fileName,
        action: 'malware_scan',
        timestamp: new Date().toISOString()
      });
      
      // Simulate scanning API
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // For demo, we'll generate some simulated results
      const isMalicious = Math.random() < 0.3; // 30% chance of being malicious
      
      if (isMalicious) {
        return {
          status: 'complete',
          url: scanParams.url,
          fileName: scanParams.fileName,
          scanId: `scan-${Date.now()}`,
          detections: [
            {
              type: 'trojan',
              name: 'Trojan.GenericKD.45129766',
              description: 'A generic trojan detection based on machine learning',
              severity: 'high'
            },
            {
              type: 'adware',
              name: 'Adware.GenericAD.3812',
              description: 'Unwanted advertisement software',
              severity: 'low'
            }
          ],
          clean: false,
          timestamp: new Date().toISOString()
        };
      }
      
      return {
        status: 'complete',
        url: scanParams.url,
        fileName: scanParams.fileName,
        scanId: `scan-${Date.now()}`,
        detections: [],
        clean: true,
        message: 'No threats detected',
        timestamp: new Date().toISOString()
      };
    },
    enabled: !!scanParams,
    refetchOnWindowFocus: false,
    refetchInterval: query => {
      const status = query.state.data?.status;
      return status === 'scanning' ? 2000 : false;
    }
  });
  
  const startScan = (params: MalwareScanParams) => {
    setScanParams(params);
    toast({
      title: 'Scan Started',
      description: params.url 
        ? `Scanning URL: ${params.url}` 
        : `Scanning file: ${params.fileName}`,
    });
  };
  
  const clearScan = () => {
    setScanParams(null);
  };
  
  return {
    startScan,
    clearScan,
    isScanning: scanQuery.isPending,
    scanResult: scanQuery.data,
    scanError: scanQuery.error,
    isFetching: scanQuery.isFetching
  };
};

export default useMalwareScan;
