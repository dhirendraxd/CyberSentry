
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Bug, AlertTriangle, Search, Loader2, AlertCircle, ChevronDown, ChevronUp } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { useQuery } from '@tanstack/react-query';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';

const API_KEY = '2de02f77-0e88-4b55-aefa-82cbd3ffc377';

interface Vulnerability {
  id: string;
  publishedDate: string;
  lastModifiedDate: string;
  cvssScore: number;
  cvssVector: string;
  severity: string;
  description: string;
  impactScore: number;
  exploitabilityScore: number;
}

const VulnerabilityScanner = () => {
  const [keyword, setKeyword] = useState('');
  const [searchInitiated, setSearchInitiated] = useState(false);
  const [searchParam, setSearchParam] = useState<string>('');
  const [resultLimit, setResultLimit] = useState<string>('10');
  const [openItems, setOpenItems] = useState<Set<string>>(new Set());

  const toggleItem = (id: string) => {
    const newOpenItems = new Set(openItems);
    if (newOpenItems.has(id)) {
      newOpenItems.delete(id);
    } else {
      newOpenItems.add(id);
    }
    setOpenItems(newOpenItems);
  };
  
  const { data: vulnerabilities, isLoading } = useQuery({
    queryKey: ['nvd', searchParam, resultLimit],
    queryFn: async () => {
      if (!searchParam) return [];
      
      const apiUrl = new URL('https://services.nvd.nist.gov/rest/json/cves/1.0');
      apiUrl.searchParams.append('apiKey', API_KEY);
      apiUrl.searchParams.append('keyword', searchParam);
      apiUrl.searchParams.append('resultsPerPage', resultLimit);
      
      const response = await fetch(apiUrl.toString());
      if (!response.ok) {
        throw new Error('Failed to fetch vulnerability data');
      }
      
      const data = await response.json();
      return data.result.CVE_Items.map((item: any) => {
        // Extract CVSS score and vector if available
        const impact = item.impact;
        let cvssScore = 0;
        let cvssVector = '';
        let severity = 'UNKNOWN';
        let impactScore = 0;
        let exploitabilityScore = 0;

        if (impact && impact.baseMetricV3 && impact.baseMetricV3.cvssV3) {
          cvssScore = impact.baseMetricV3.cvssV3.baseScore;
          cvssVector = impact.baseMetricV3.cvssV3.vectorString;
          severity = impact.baseMetricV3.cvssV3.baseSeverity;
          impactScore = impact.baseMetricV3.impactScore;
          exploitabilityScore = impact.baseMetricV3.exploitabilityScore;
        } else if (impact && impact.baseMetricV2 && impact.baseMetricV2.cvssV2) {
          cvssScore = impact.baseMetricV2.cvssV2.baseScore;
          cvssVector = impact.baseMetricV2.cvssV2.vectorString;
          severity = impact.baseMetricV2.severity;
          impactScore = impact.baseMetricV2.impactScore;
          exploitabilityScore = impact.baseMetricV2.exploitabilityScore;
        }

        // Get description
        const description = item.cve.description.description_data[0].value;

        return {
          id: item.cve.CVE_data_meta.ID,
          publishedDate: item.publishedDate,
          lastModifiedDate: item.lastModifiedDate,
          cvssScore,
          cvssVector,
          severity,
          description,
          impactScore,
          exploitabilityScore
        } as Vulnerability;
      });
    },
    enabled: searchInitiated && !!searchParam,
  });
  
  const handleSearch = () => {
    if (!keyword) {
      toast({
        title: "Keyword Required",
        description: "Please enter a keyword to search for vulnerabilities.",
        variant: "destructive",
      });
      return;
    }
    
    setSearchParam(keyword);
    setSearchInitiated(true);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toUpperCase()) {
      case 'CRITICAL':
        return 'bg-red-500 text-white';
      case 'HIGH':
        return 'bg-cyber-alert text-white';
      case 'MEDIUM':
        return 'bg-yellow-500 text-black';
      case 'LOW':
        return 'bg-green-500 text-white';
      default:
        return 'bg-gray-500 text-white';
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' });
  };

  return (
    <div className="rounded-xl glass-card p-6 border border-cyber-purple/20">
      <div className="flex flex-col text-left max-w-4xl mx-auto">
        <div className="flex flex-col md:flex-row items-center mb-6 gap-4">
          <div className="rounded-full bg-cyber-purple/10 p-3">
            <Bug className="h-6 w-6 text-cyber-purple" />
          </div>
          <div>
            <h2 className="text-xl font-semibold text-white mb-1">National Vulnerability Database</h2>
            <p className="text-gray-400">
              Search for known security vulnerabilities by keyword (e.g., software name, CVE ID).
            </p>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-8 gap-4 mb-6">
          <div className="md:col-span-5">
            <Input
              type="text"
              placeholder="Enter keyword (e.g., 'wordpress', 'apache', 'CVE-2023-12345')"
              value={keyword}
              onChange={(e) => setKeyword(e.target.value)}
              className="bg-black/30 border-cyber-purple/20 focus:border-cyber-purple/50 w-full"
            />
          </div>
          <div className="md:col-span-2">
            <Select defaultValue={resultLimit} onValueChange={setResultLimit}>
              <SelectTrigger className="bg-black/30 border-cyber-purple/20">
                <SelectValue placeholder="Limit results" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="5">5 results</SelectItem>
                <SelectItem value="10">10 results</SelectItem>
                <SelectItem value="20">20 results</SelectItem>
                <SelectItem value="50">50 results</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="md:col-span-1">
            <Button 
              onClick={handleSearch}
              disabled={isLoading || !keyword}
              className="w-full bg-cyber-purple hover:bg-cyber-purple/90"
            >
              {isLoading ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <>
                  <Search className="h-4 w-4 mr-2" />
                  Search
                </>
              )}
            </Button>
          </div>
        </div>
        
        {searchInitiated && !isLoading && (
          <div className="space-y-4">
            {vulnerabilities && vulnerabilities.length > 0 ? (
              <>
                <h3 className="text-lg font-medium text-white mb-2">
                  Found {vulnerabilities.length} vulnerabilities for "{searchParam}"
                </h3>
                <div className="space-y-3">
                  {vulnerabilities.map((vuln: Vulnerability) => (
                    <Card key={vuln.id} className="bg-black/30 border-cyber-purple/20 overflow-hidden">
                      <Collapsible
                        open={openItems.has(vuln.id)}
                        onOpenChange={() => toggleItem(vuln.id)}
                      >
                        <CardHeader className="p-4 pb-2">
                          <div className="flex items-start justify-between">
                            <div className="space-y-1.5">
                              <div className="flex items-center">
                                <Badge className={`mr-2 ${getSeverityColor(vuln.severity)}`}>
                                  {vuln.severity || 'N/A'}
                                </Badge>
                                <CardTitle className="text-base font-medium text-white">{vuln.id}</CardTitle>
                              </div>
                              <p className="text-sm text-gray-400 line-clamp-2">{vuln.description}</p>
                            </div>
                            <div className="text-right flex-shrink-0">
                              <p className="text-sm font-medium text-white">CVSS: {vuln.cvssScore || 'N/A'}</p>
                              <p className="text-xs text-gray-400">{formatDate(vuln.publishedDate)}</p>
                            </div>
                          </div>
                          <CollapsibleTrigger asChild>
                            <Button variant="ghost" size="sm" className="w-full mt-2">
                              {openItems.has(vuln.id) ? (
                                <ChevronUp className="h-4 w-4" />
                              ) : (
                                <ChevronDown className="h-4 w-4" />
                              )}
                              <span className="ml-2 text-xs">
                                {openItems.has(vuln.id) ? "Less details" : "More details"}
                              </span>
                            </Button>
                          </CollapsibleTrigger>
                        </CardHeader>
                        <CollapsibleContent>
                          <CardContent className="p-4 pt-0">
                            <div className="space-y-3 border-t border-cyber-purple/10 pt-3">
                              {vuln.cvssVector && (
                                <div>
                                  <p className="text-xs text-gray-400">CVSS Vector</p>
                                  <p className="text-sm font-mono text-white bg-black/30 p-1 rounded mt-1">
                                    {vuln.cvssVector}
                                  </p>
                                </div>
                              )}
                              <div className="grid grid-cols-2 gap-2">
                                <div>
                                  <p className="text-xs text-gray-400">Impact Score</p>
                                  <p className="text-sm text-white">{vuln.impactScore || 'N/A'}</p>
                                </div>
                                <div>
                                  <p className="text-xs text-gray-400">Exploitability Score</p>
                                  <p className="text-sm text-white">{vuln.exploitabilityScore || 'N/A'}</p>
                                </div>
                                <div>
                                  <p className="text-xs text-gray-400">Published</p>
                                  <p className="text-sm text-white">{formatDate(vuln.publishedDate)}</p>
                                </div>
                                <div>
                                  <p className="text-xs text-gray-400">Last Updated</p>
                                  <p className="text-sm text-white">{formatDate(vuln.lastModifiedDate)}</p>
                                </div>
                              </div>
                            </div>
                          </CardContent>
                        </CollapsibleContent>
                      </Collapsible>
                    </Card>
                  ))}
                </div>
              </>
            ) : (
              <div className="p-6 text-center">
                <AlertCircle className="h-12 w-12 text-gray-500 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-white">No vulnerabilities found</h3>
                <p className="text-gray-400 mt-2">
                  We couldn't find any vulnerabilities matching "{searchParam}". Try a different keyword.
                </p>
              </div>
            )}
          </div>
        )}
        
        {!searchInitiated && (
          <div className="p-6 text-center border border-dashed border-cyber-purple/20 rounded-xl">
            <AlertTriangle className="h-12 w-12 text-cyber-purple mx-auto mb-4" />
            <h3 className="text-lg font-medium text-white">Search for Vulnerabilities</h3>
            <p className="text-gray-400 mt-2 max-w-md mx-auto">
              Enter a keyword to search for known security vulnerabilities in the National Vulnerability Database.
            </p>
            <div className="mt-4 text-xs text-gray-500">
              <p>Search Examples:</p>
              <ul className="space-y-1 mt-1">
                <li>Software name: "wordpress", "apache", "windows"</li>
                <li>Specific CVE: "CVE-2023-12345"</li>
                <li>Technology: "sql injection", "buffer overflow"</li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityScanner;
